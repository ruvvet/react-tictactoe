{"version":3,"sources":["components/Spaces.js","components/Players.js","App.js","reportWebVitals.js","index.js"],"names":["Spaces","handleClick","board","highlight","spaces","x","y","push","className","onClick","id","Players","players","playerHighlight","console","log","score","playersScores","i","player","App","useState","mark","setPlayers","Array","map","fill","setBoard","setPlayer","nextRound","setNextRound","setHighlight","setPlayerHighlight","message","setMessage","checkWinner","length","includes","clearBoard","setTimeout","newBoard","playersCopy","findIndex","p","displayNextRoundBtn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAEe,SAASA,EAAT,GAOb,IAPiE,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UAM7CC,EAAS,GANiD,WAOvDC,GACP,IAR8D,eAQrDC,GACPF,EAAOG,KACL,wBACEC,UAAS,gBAAWL,EAAU,GAAD,OAAIE,EAAJ,YAASC,KACtCG,QAAS,WACPR,EAAYI,EAAEC,IAGhBI,GAAE,UAAKL,GAAL,OAASC,GANb,SASE,qBAAKE,UAAU,QAAf,SAAwBN,EAAMG,GAAGC,MATnC,gBAKgBD,GALhB,OAKoBC,MAPfA,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,IADFD,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAkBT,OAAO,qBAAKG,UAAU,QAAf,SAAwBJ,IC3BlB,SAASO,EAAT,GAA+C,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC1CC,QAAQC,IAAIH,EAAQ,GAAGI,OAGvB,IAFA,IAAMC,EAAgB,GAEbC,EAAE,EAAGA,EAAE,EAAGA,IACfD,EAAcV,KAAM,sBAAKC,UAAS,uBAAmBK,EAAgBK,IAAjD,UAA4E,uBAAMV,UAAY,cAAlB,qBAAyCI,EAAQM,GAAGC,OAApD,OAA5E,IAAiJP,EAAQM,GAAGF,MAA5J,uBAAsEE,KAG9F,OAAO,qBAAKV,UAAY,SAAjB,SAA2BS,I,MCqNnBG,MAxNf,WAAe,MAEiBC,mBAAS,CACrC,CAAEF,OAAQ,EAAGG,KAAM,IAAKN,MAAO,GAC/B,CAAEG,OAAQ,EAAGG,KAAM,IAAKN,MAAO,KAJpB,mBAENJ,EAFM,KAEGW,EAFH,OAQaF,mBAExB,YAAIG,MAAM,IAAIC,KAAI,kBAAMD,MAAM,GAAGE,KAAK,UAV3B,mBAQNxB,EARM,KAQCyB,EARD,OAceN,mBAAST,EAAQ,IAdhC,mBAcNO,EAdM,KAcES,EAdF,OAeqBP,oBAAS,GAf9B,mBAeNQ,EAfM,KAeKC,EAfL,OAgBqBT,mBAAS,IAhB9B,mBAgBNlB,EAhBM,KAgBK4B,EAhBL,OAiBiCV,mBAAS,CACrD,kBACA,OAnBW,mBAiBNR,EAjBM,KAiBWmB,EAjBX,OAwBiBX,mBAAS,eAxB1B,mBAwBNY,EAxBM,KAwBGC,EAxBH,KA0BPC,EAAc,WAKlB,IAAK,IAAIjB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAKvB,IAAD,EAJF,GACkB,OAAhBhB,EAAM,GAAGgB,IACThB,EAAM,GAAGgB,KAAOhB,EAAM,GAAGgB,IACzBhB,EAAM,GAAGgB,KAAOhB,EAAM,GAAGgB,GAOzB,OALAa,GAAY,+BACJb,GAAM,aADF,0BAEJA,GAAM,aAFF,0BAGJA,GAAM,aAHF,KAKL,EAKX,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAKvB,IAAD,EAJF,GACkB,OAAhBhB,EAAMgB,GAAG,IACThB,EAAMgB,GAAG,KAAOhB,EAAMgB,GAAG,IACzBhB,EAAMgB,GAAG,KAAOhB,EAAMgB,GAAG,GAOzB,OALAa,GAAY,6BACNb,EADM,MACE,aADF,wBAENA,EAFM,MAEE,aAFF,wBAGNA,EAHM,MAGE,aAHF,KAKL,EASR,IAAD,EAaA,EAjBF,GACkB,OAAhBhB,EAAM,GAAG,IACTA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,GAOzB,OALA6B,GAAY,yBACD,aADC,oBAED,aAFC,oBAGD,aAHC,KAKL,EAGT,GACkB,OAAhB7B,EAAM,GAAG,IACTA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,GAOzB,OALA6B,GAAY,yBACD,aADC,oBAED,aAFC,oBAGD,aAHC,KAKL,EAMT,IAAK,IAAIb,EAAI,EAAGA,EAAIhB,EAAMkC,OAAQlB,IAChC,GAAIhB,EAAMgB,GAAGmB,SAAS,MACpB,OAAO,EAIX,MAAO,OA4DHC,EAAa,WACjBX,EAAS,YAAIH,MAAM,IAAIC,KAAI,kBAAMD,MAAM,GAAGE,KAAK,UAC/CE,EAAUhB,EAAQ,IAClBmB,EAAa,IACbD,GAAa,GACbE,EAAmB,CAAC,kBAAmB,OACvCE,EAAW,gBA8Bb,OACE,sBAAK1B,UAAU,MAAf,UACE,qBAAKA,UAAU,UAAf,SAA0ByB,IAC1B,sBAAKzB,UAAU,OAAf,UACE,cAACR,EAAD,CAAQC,YAhGM,SAACI,EAAGC,GAWtB,GAAKJ,EAAMG,GAAGC,GAkCZ4B,EAAW,uBACXK,YAAW,WACTL,EAAW,iBACV,SArCa,CAGhB,IAAMM,EAAQ,YAAOtC,GAMrB,GALAsC,EAASnC,GAAGC,GAAKa,EAAOG,KACxBK,EAASa,GAILL,IAAe,CACjBD,EAAW,UAGX,IAAMO,EAAW,YAAO7B,GAIxB6B,EAHoB7B,EAAQ8B,WAC1B,SAACC,GAAD,OAAOA,EAAExB,SAAWA,EAAOA,WAEJH,QAEzBO,EAAWkB,GAEXX,GAAa,OACa,OAAjBK,IACTD,EAAW,QAGXN,EAAUT,EAAOG,OAASV,EAAQ,GAAGU,KAAOV,EAAQ,GAAKA,EAAQ,IAC7DO,IAAWP,EAAQ,GACrBoB,EAAmB,CAAC,KAAM,oBAE1BA,EAAmB,CAAC,kBAAmB,UAuDP9B,MAAOA,EAAOC,UAAWA,IAlBrC,WAC1B,GAAI0B,EACF,OACE,qBAAKrB,UAAY,gBAAjB,SACA,qBAAKA,UAAU,YAAf,SACE,wBAAQA,UAAU,WAAWC,QAAS6B,EAAtC,2BAcDM,MAEH,2CACU,sBAAMpC,UAAU,cAAhB,SAA+BW,EAAOG,OADhD,YAQA,cAACX,EAAD,CAASC,QAASA,EAASC,gBAAiBA,IAE5C,wBAAQL,UAAY,WAAWC,QA5ClB,WACfkB,EAAS,YAAIH,MAAM,IAAIC,KAAI,kBAAMD,MAAM,GAAGE,KAAK,UAC/CE,EAAUhB,EAAQ,IAClBmB,EAAa,IACbD,GAAa,GACbE,EAAmB,CAAC,kBAAmB,OACvCT,EAAW,CACT,CAAEJ,OAAQ,EAAGG,KAAM,IAAKN,MAAO,GAC/B,CAAEG,OAAQ,EAAGG,KAAM,IAAKN,MAAO,KAEjCkB,EAAW,gBAkCT,uBC5MSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bbe7d353.chunk.js","sourcesContent":["import './spaces.css';\r\n\r\nexport default function Spaces({ handleClick, board, highlight }) {\r\n\r\n\r\n\r\n//highlight { 'xy': 'highlight'}\r\n\r\n  const spaces = [];\r\n  for (let x = 0; x < 3; x++) {\r\n    for (let y = 0; y < 3; y++) {\r\n      spaces.push(\r\n        <button\r\n          className={`space ${highlight[`${x},${y}`]}`}\r\n          onClick={() => {\r\n            handleClick(x,y);\r\n          }}\r\n          key={`space-${x}${y}`}\r\n          id={`${x}${y}`}\r\n        >\r\n          {/* here we are reflecting the state of the virtual board by index */}\r\n          <div className=\"print\">{board[x][y]}</div>\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  return <div className=\"board\">{spaces}</div>;\r\n}\r\n","export default function Players({players, playerHighlight }) {\r\nconsole.log(players[0].score)\r\nconst playersScores = [];\r\n\r\nfor (let i=0; i<2; i++){\r\n    playersScores.push( <div className ={`player-score ${playerHighlight[i]}`} key={`player-${i}`} ><span className = \"player-text\"> Player {players[i].player}:</span> {players[i].score} </div>)\r\n}\r\n\r\nreturn <div className = \"scores\">{playersScores}</div>\r\n}","import Spaces from './components/Spaces';\nimport Players from './components/Players';\nimport './App.css';\nimport React, { useState } from 'react';\n\nfunction App() {\n  // CREATE THE PLAYERS\n  const [players, setPlayers] = useState([\n    { player: 1, mark: 'X', score: 0 },\n    { player: 2, mark: 'O', score: 0 },\n  ]);\n\n  // initialize the board\n  const [board, setBoard] = useState(\n    //Array(9).fill(null)\n    [...Array(3)].map(() => Array(3).fill(null))\n  );\n\n  // initialize the player\n  const [player, setPlayer] = useState(players[0]);\n  const [nextRound, setNextRound] = useState(false);\n  const [highlight, setHighlight] = useState({});\n  const [playerHighlight, setPlayerHighlight] = useState([\n    'playerHighlight',\n    null,\n  ]);\n\n  // CHECK WIN CONDITION\n\n  const [message, setMessage] = useState('tic-tac-toe');\n\n  const checkWinner = () => {\n    // winner happens when three in a row\n    // else board is full and it's a tie\n\n    // check the rows\n    for (let i = 0; i < 3; i++) {\n      if (\n        board[0][i] !== null &&\n        board[0][i] === board[1][i] &&\n        board[1][i] === board[2][i]\n      ) {\n        setHighlight({\n          [`0,${i}`]: 'highlight',\n          [`1,${i}`]: 'highlight',\n          [`2,${i}`]: 'highlight',\n        });\n        return true;\n      }\n    }\n\n    //check the columns\n    for (let i = 0; i < 3; i++) {\n      if (\n        board[i][0] !== null &&\n        board[i][0] === board[i][1] &&\n        board[i][1] === board[i][2]\n      ) {\n        setHighlight({\n          [`${i},0`]: 'highlight',\n          [`${i},1`]: 'highlight',\n          [`${i},2`]: 'highlight',\n        });\n        return true;\n      }\n    }\n\n    //check the diagonals\n    if (\n      board[0][0] !== null &&\n      board[0][0] === board[1][1] &&\n      board[1][1] === board[2][2]\n    ) {\n      setHighlight({\n        [`0,0`]: 'highlight',\n        [`1,1`]: 'highlight',\n        [`2,2`]: 'highlight',\n      });\n      return true;\n    }\n\n    if (\n      board[2][0] !== null &&\n      board[2][0] === board[1][1] &&\n      board[1][1] === board[0][2]\n    ) {\n      setHighlight({\n        [`2,0`]: 'highlight',\n        [`1,1`]: 'highlight',\n        [`0,2`]: 'highlight',\n      });\n      return true;\n    }\n\n    // If no winner was found, check if the board is full, that would be a tie:\n    // 1: Write a for loop to check if there is some empty spot, if ANY empty spot; return false\n    // 2: Use a single every or some and a single includes\n    for (let i = 0; i < board.length; i++) {\n      if (board[i].includes(null)) {\n        return false;\n      }\n    }\n\n    return 'Tie';\n  };\n\n  // CLICK HANDLER\n  const handleClick = (x, y) => {\n    // when we click a button, it updates the board\n    // the click handler is passed 2 arguments, the x,y coorinate values\n    // which are mapped to the buttons we create with 2 nested loops inside Spaces.js\n\n    // the updated board state is then rendered by the child component\n\n    // CREATE A NEW BOARD\n    // STOP TRYING TO CHANGE THE OLD ONE\n\n    // if the space is empty, move is valid\n    if (!board[x][y]) {\n      // then update the board and th eboard state\n\n      const newBoard = [...board];\n      newBoard[x][y] = player.mark;\n      setBoard(newBoard);\n\n      // check for a winner\n\n      if (checkWinner()) {\n        setMessage('Winner');\n        //update the score\n\n        const playersCopy = [...players];\n        const playerIndex = players.findIndex(\n          (p) => p.player === player.player\n        );\n        playersCopy[playerIndex].score++;\n\n        setPlayers(playersCopy);\n\n        setNextRound(true);\n      } else if (checkWinner() == 'Tie') {\n        setMessage('Tie');\n      } else {\n        // then update the playerstate\n        setPlayer(player.mark === players[0].mark ? players[1] : players[0]);\n        if (player === players[0]) {\n          setPlayerHighlight([null, 'playerHighlight']);\n        } else {\n          setPlayerHighlight(['playerHighlight', null]);\n        }\n      }\n    } else {\n      setMessage('you cant move there');\n      setTimeout(() => {\n        setMessage('tic-tac-toe');\n      }, 2000);\n    }\n\n    // now for game logic\n    // when a button is clicked, we change players\n    // let currentPlayer = player;\n  };\n\n  const clearBoard = () => {\n    setBoard([...Array(3)].map(() => Array(3).fill(null)));\n    setPlayer(players[0]);\n    setHighlight([]);\n    setNextRound(false);\n    setPlayerHighlight(['playerHighlight', null]);\n    setMessage('tic-tac-toe');\n  };\n\n  const clearAll = () => {\n    setBoard([...Array(3)].map(() => Array(3).fill(null)));\n    setPlayer(players[0]);\n    setHighlight([]);\n    setNextRound(false);\n    setPlayerHighlight(['playerHighlight', null]);\n    setPlayers([\n      { player: 1, mark: 'X', score: 0 },\n      { player: 2, mark: 'O', score: 0 },\n    ]);\n    setMessage('tic-tac-toe');\n  };\n\n  const displayNextRoundBtn = () => {\n    if (nextRound) {\n      return (\n        <div className = \"nextContainer\">\n        <div className=\"nextRound\">\n          <button className=\"next-btn\" onClick={clearBoard}>\n            Next Game\n          </button>\n        </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"message\">{message}</div>\n      <div className=\"main\">\n        <Spaces handleClick={handleClick} board={board} highlight={highlight} />\n        {displayNextRoundBtn()}\n      </div>\n      <div>\n        Player \"<span className=\"player-text\">{player.mark}</span>\" Turn\n      </div>\n\n      {/* <div className = \"scores\">\n        <div className = \"player-score\"><span className = \"player-text\"> Player 1:</span> {players[0].score} </div>\n        <div className = \"player-score\"><span className = \"player-text\">Player 2:</span> {players[1].score} </div>\n      </div> */}\n      <Players players={players} playerHighlight={playerHighlight} />\n\n      <button className = \"next-btn\" onClick={clearAll}>RESET</button>\n    </div>\n  );\n}\n\nexport default App;\n\n// useeffect - > reset\n//https://reactjs.org/tutorial/tutorial.html#declaring-a-winner\n\n//input to set a marker >> update player's'\n// say who goes first >> update player\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}